Cache

When the processor makes a request for memory reference, the request is first sought in the cache. If we get the memory reference that is requested we call it “CACHE HIT” otherwise “CACHE MISS”.

Hit ratio = hit/(hit + miss) = no. of hits/ total access.

When the processor makes a request for memory reference, the request is first sought in the cache. If we get the memory reference that is requested we call it “CACHE HIT” otherwise “CACHE MISS”.

The locality of reference is of two types:

Spatial locality: The adjacent words in the block are referenced by the CPU  in the near future.
Temporal locality: The same word in the block are referenced by the CPU in the near future  

The cache is organized not in bytes but as blocks of cache lines with each line containing the same no. of bytes. (16-64)

Cache lines do not have a fixed address, which enables the cache system to populate each cache line with a unique (non-contiguous) address. 

There are three methods for filling a cache lines

Fully associated - The most flexible.
Direct mapped - The most basic
Self associated - A combination of the two.

Program:
It resides in the secondary storage device
A program consists of instructions in any programming language.
program is a passive entity, which is a file containing a list of instructions stored on a disk (often called an executable file).
A program becomes a process when an executable file is loaded into memory.

Process:
It resides in the main memory
A process consists of instructions in machine code. A program in execution is called a process.
There are two types of processes: I/O bound process and CPU bound process.

Thread:
Thread is the basic unit of execution or CPU utilization. 


Why does thrashing occur?
https://takeuforward.org/operating-system/why-does-thrashing-occur/

If there is an increase in the number of processes submitted to the CPU for execution,
then the CPU utilization will be increased. But by increasing the process continues at a certain time,
the CPU utilization falls sharply and sometimes it reaches 0. This situation is said to be thrashing.


If CPU utilization is too small, then we increase the degree of multiprogramming by introducing a new process to the system. 

Suppose a process enters a new phase in its execution and needs more frames. It starts faulting and taking processes away from other processes. These faulting processes use the paging device to swap pages in and out. As the process waits for the paging device, CPU utilization decreases.

The CPU scheduler increases the degree of multiprogramming on finding a decrease in CPU utilization. The new processes start taking frames from each other processes thereby causing more page faults and a long queue for the paging device. Due to all this, CPU utilization decreases further thus making the CPU scheduler increase the degree of multiprogramming even more. This causes thrashing and also throughput decreases.

From the figure, we can see that the degree of multiprogramming increases with the increase in CPU utilization although more slowly until the maximum is reached. 

Now if the degree of multiprogramming increases even further, thrashing comes into the picture, and CPU utilization drops sharply. 

At this point, we must decrease the degree of multiprogramming in order to increase CPU utilization and stop thrashing. 

The effects of thrashing can be minimized by local replacement (priority replacement algorithm). So what happens in local replacement is that if one process starts thrashing it cannot steal frames from another process thereby causing the latter to thrash as well.

If the processes are thrashing the average time for the page fault will increase because they will be in a queue for paging devices most of the time. The effective access time will increase. 

The working set strategy starts by looking at how many frames a process is actually using. This approach is known as the locality model of process execution.

The locality model states that, as a process executes, it moves from locality to locality. A locality is a set of pages that are actively used together. It also states that all programs will exhibit a basic memory reference structure. 

