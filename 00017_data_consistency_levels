data consistency levels

https://www.geeksforgeeks.org/weak-levels-of-consistency/


Strict Consistency, Atomic Consistency, and Sequential Consistency are stronger levels of consistency.
Causal Consistency, Eventual Consistency is weaker levels of Consistency


| Level                      | Description                                                                        | Use Case                        |
| -------------------------- | ---------------------------------------------------------------------------------- | ------------------------------- |
| **Strong Consistency**     | Reads always return the latest write globally.                                     | Banking, financial transactions |
| **Linearizability**        | Operations appear instantaneous and in real-time order.                            | Critical real-time systems      |
| **Sequential Consistency** | All operations seen in the same order by all nodes, but not necessarily real-time. | Collaborative apps              |
| **Causal Consistency**     | Writes causally related are seen in order; concurrent writes may differ in order.  | Social networks, messaging      |
| **Eventual Consistency**   | Updates propagate eventually; replicas converge over time. Reads may be stale.     | DNS, caches, shopping carts     |
| **Read-Your-Writes**       | Client always sees its own writes immediately.                                     | User profiles                   |
| **Monotonic Reads**        | Once a value is seen, it won’t revert to older values.                             | Dashboards                      |
| **Monotonic Writes**       | Writes from one client are applied in order.                                       | Logs, sequences                 |


Data consistency levels define how up-to-date and synchronized copies of data are across distributed systems. These levels are crucial in databases, especially distributed ones like Cassandra, MongoDB, DynamoDB, and in systems following the CAP theorem (Consistency, Availability, Partition tolerance).

Here's a breakdown of the common data consistency levels, from strongest to weakest:

🔒 Strong Consistency
Definition: Every read returns the most recent write.

Behavior: Acts as if there is only a single, up-to-date copy of the data.

Use case: Banking systems, financial transactions.

Trade-off: Latency is higher; system may block during network partitions.

🔁 Linearizability / Atomic  Consistency or Linear Consistency
Subset of: Strong consistency.

Definition: Operations appear to occur atomically and in real-time order.

Note: Ensures both consistency and time-order correctness.

📘 Sequential Consistency
Definition: All nodes see operations in the same order, but not necessarily in real-time.

Behavior: Operations may be delayed, but their order is preserved across clients.

Use case: Collaborative apps, ordering systems.

⚖️ Causal Consistency
Definition: Writes that are causally related are seen by all nodes in the same order.

Behavior: Concurrent writes can be seen in different orders; causally related ones are ordered correctly.

Use case: Social media timelines.

⏳ Eventual Consistency
Definition: If no new updates are made, eventually all replicas will converge to the same value.

Behavior: Reads may return stale data.

Use case: DNS, caching layers, shopping carts.

Trade-off: Low latency, high availability, but no guarantee of up-to-date reads.

🔄 Read Your Writes Consistency
Definition: A client will always see its own writes, even if other clients don’t immediately.

Use case: User profile update feedback.

👥 Monotonic Read Consistency
Definition: Once a client sees a value, it will not see an older value in subsequent reads.

Use case: Data dashboards, progress tracking.

📈 Monotonic Write Consistency
Definition: Writes from a single client are applied in the order they were issued.

Use case: Logging systems, time-series data.



Summary Table

| Consistency Level | Read Freshness     | Order Guarantee | Availability |
| ----------------- | ------------------ | --------------- | ------------ |
| Strong            | ✅ Always latest    | ✅ Total order   | ❌ May block  |
| Linearizable      | ✅                  | ✅ Real-time     | ❌            |
| Sequential        | ❌ Sometimes        | ✅ Logical order | ✅            |
| Causal            | ❌ Sometimes        | ✅ Causal order  | ✅            |
| Eventual          | ❌ Eventually       | ❌ None          | ✅✅           |
| Read-Your-Writes  | ✅ for own          | ❌               | ✅            |
| Monotonic Read    | ✅ (non-decreasing) | ❌               | ✅            |
| Monotonic Write   | ✅ (write order)    | ❌               | ✅            |


Data consistency levels define the degree to which a distributed system ensures that data remains synchronized across replicas. These levels balance availability, latency, and fault tolerance. Here are the most common consistency levels:

1. Strong Consistency
Definition: After a write completes, any subsequent read returns that value or a newer one.

Example Systems: Traditional RDBMS, Google Spanner.

Pros: Simple mental model, ensures correctness.

Cons: Higher latency, reduced availability during network partitions.

2. Weak Consistency
Definition: No guarantee that a subsequent read will return the latest write. Data may be stale.

Example: DNS caching.

Pros: Very fast, highly available.

Cons: Can lead to reading outdated or incorrect data.

3. Eventual Consistency
Definition: Given no new updates, all replicas will eventually converge to the same value.

Example Systems: Amazon DynamoDB, Cassandra (by default).

Pros: Highly available, good for systems that tolerate temporary staleness.

Cons: May return stale data shortly after a write.

4. Causal Consistency
Definition: Operations that are causally related are seen by all processes in the same order.

Example: Collaborative applications like Google Docs.

Pros: More intuitive than eventual consistency; maintains logical order of dependent operations.

Cons: Complex to implement and may require tracking dependencies.

5. Read-Your-Writes Consistency
Definition: After a write by a client, any subsequent reads by that same client will reflect the write.

Pros: Useful in user-centric apps (e.g., seeing your own profile updates).

Cons: Doesn’t guarantee consistency across different users or nodes.

6. Monotonic Read Consistency
Definition: Once a client reads a value, it will not see an older value in future reads.

Pros: Avoids “time travel” in reads.

Cons: Needs version tracking per client.

7. Monotonic Write Consistency
Definition: Writes from a client are completed in the order they were issued.

Pros: Ensures write order.

Cons: Requires careful coordination in distributed settings.

8. Session Consistency
Definition: A session guarantees read-your-writes, monotonic reads/writes, and causal consistency within a single session.

Pros: Balanced consistency for user sessions.

Cons: Not suitable for global consistency guarantees.




🔒 1. Strong Consistency
Guarantee: Every read returns the most recent write.

Behavior: Acts like a single, up-to-date copy of data.

Use case: Banking systems, financial transactions.

Trade-off: Higher latency and lower availability in case of network partitions.

📏 2. Linearizability
Stronger form of strong consistency.

Guarantee: All operations appear instantaneous and in real-time order.

Use case: Critical systems that require real-time accuracy.

🧾 3. Sequential Consistency
Guarantee: Operations are seen in the same order by all nodes, but not necessarily real-time.

Use case: Systems where operation order matters more than freshness.

🔗 4. Causal Consistency
Guarantee: Operations that are causally related are seen in the same order by all nodes.

Concurrency: Concurrent, unrelated updates can be seen in different orders.

Use case: Collaborative apps (like Google Docs), social networks.

⏳ 5. Eventual Consistency
Guarantee: If no new updates are made, all replicas will eventually become consistent.

Behavior: Reads may return stale data.

Use case: DNS systems, cached data, shopping carts.

Advantage: High availability and performance.

👤 6. Read-Your-Writes Consistency
Guarantee: A client always sees its own writes in subsequent reads.

Use case: Profile updates, personalized dashboards.

📚 7. Monotonic Read Consistency
Guarantee: Once a client reads a value, they will never see an older value.

Use case: Data analytics dashboards, progress tracking.

📝 8. Monotonic Write Consistency
Guarantee: Writes from a single client are applied in the order they were issued.

Use case: Logs, counters, sequential data.



🔁 Summary Table

| Consistency Level | Freshness      | Order Guaranteed       | Availability |
| ----------------- | -------------- | ---------------------- | ------------ |
| Strong            | Always latest  | Real-time order        | Lower        |
| Linearizable      | Strict         | Real-time + atomic     | Lower        |
| Sequential        | Possibly stale | Global logical order   | Moderate     |
| Causal            | Possibly stale | Causal order only      | Higher       |
| Eventual          | Eventually     | No guarantees          | Highest      |
| Read-Your-Writes  | Own writes     | Per-client             | Higher       |
| Monotonic Reads   | Non-decreasing | Per-client             | Higher       |
| Monotonic Writes  | In order       | Per-client write order | Higher       |

Great question — Tunable Consistency is a key concept primarily associated with distributed databases like Cassandra, DynamoDB, and ScyllaDB, where clients can choose the desired trade-off between consistency, availability, and latency per operation.

🛠️ Tunable Consistency

Definition:
A configurable consistency level that allows the application to choose how many replicas must acknowledge a read or write operation for it to be considered successful.

📍Where It’s Used
Apache Cassandra

Amazon DynamoDB

ScyllaDB

Some configurations in MongoDB (via write concern/read concern)

⚙️ In Cassandra: Examples of Tunable Levels
Consistency Level	Description
ONE	Response from any one replica is enough.
TWO	At least two replicas must respond.
THREE	Three replicas must respond.
QUORUM	Majority of replicas must respond (e.g., 2 of 3).
ALL	All replicas must respond.
LOCAL_QUORUM	Majority in local data center.
EACH_QUORUM	Quorum in each data center (multi-DC).
ANY	At least one replica receives the write (even if it's a hinted handoff).

📊 Tunable Consistency Spectrum


| Level         | Latency     | Consistency | Availability |
| ------------- | ----------- | ----------- | ------------ |
| `ONE` / `ANY` | ✅ Low       | ❌ Weak      | ✅ High       |
| `QUORUM`      | ⚖️ Balanced | ✅ Strong    | ⚖️ Medium    |
| `ALL`         | ❌ High      | ✅ Strongest | ❌ Low        |


✅ Example in Practice (Cassandra Write):


Session session = cluster.connect();
Statement stmt = new SimpleStatement("INSERT INTO users (id, name) VALUES (1, 'Alice')")
                        .setConsistencyLevel(ConsistencyLevel.QUORUM);
session.execute(stmt);



📘 In Summary:
Tunable consistency gives developers control over the trade-off between consistency, availability, and performance.

It does not represent a new consistency model itself, but is a mechanism to let users choose among consistency levels (e.g., ONE, QUORUM, ALL).

It’s commonly found in AP-oriented systems (per the CAP theorem) like Cassandra and DynamoDB.

Let me know if you'd like a deeper dive into how read-repair, hinted handoff, and replication factor affect consistency in tunable systems.


Good catch! Here’s why tunable consistency wasn’t explicitly listed as a separate “consistency level” in the previous explanation:

Why Tunable Consistency Is Not a Separate Level
Tunable consistency is a mechanism, not a consistency model by itself.

The previous list describes consistency models — conceptual guarantees about how reads and writes behave system-wide (e.g., Strong, Eventual, Causal).

Tunable consistency refers to the ability to choose among those consistency levels dynamically (e.g., choosing ONE, QUORUM, or ALL in Cassandra per operation).

In other words, tunable consistency allows you to pick the level of consistency you want from the existing models, trading off latency, availability, and freshness.

Think of it this way:
Consistency models = types of guarantees (Strong, Eventual, Causal, etc.)

Tunable consistency = a knob or setting that lets you pick which guarantee you want per request in certain distributed databases.

Analogy:
Imagine a car has different driving modes: Sport, Eco, Comfort.

These modes are like consistency levels — different guarantees about data freshness and latency.

Tunable consistency is the gear selector allowing you to switch between these modes based on your current needs.

Summary:
Previous answer = consistency models and guarantees.

Tunable consistency = configurable option to select among consistency guarantees on demand.

If you want, I can show how tunable consistency maps to these models with real examples!

Data Consistency Levels in Distributed Systems
Distributed systems have multiple copies (replicas) of data across different nodes. Consistency levels describe the guarantees about how up-to-date and synchronized these replicas are when clients read or write data.


Common Consistency Levels:
| Level                      | Description                                                                        | Use Case                        |
| -------------------------- | ---------------------------------------------------------------------------------- | ------------------------------- |
| **Strong Consistency**     | Reads always return the latest write globally.                                     | Banking, financial transactions |
| **Linearizability**        | Operations appear instantaneous and in real-time order.                            | Critical real-time systems      |
| **Sequential Consistency** | All operations seen in the same order by all nodes, but not necessarily real-time. | Collaborative apps              |
| **Causal Consistency**     | Writes causally related are seen in order; concurrent writes may differ in order.  | Social networks, messaging      |
| **Eventual Consistency**   | Updates propagate eventually; replicas converge over time. Reads may be stale.     | DNS, caches, shopping carts     |
| **Read-Your-Writes**       | Client always sees its own writes immediately.                                     | User profiles                   |
| **Monotonic Reads**        | Once a value is seen, it won’t revert to older values.                             | Dashboards                      |
| **Monotonic Writes**       | Writes from one client are applied in order.                                       | Logs, sequences                 |


How Distributed Systems Ensure These Levels
Distributed systems use several mechanisms and trade-offs to guarantee different consistency levels:

1. Replication
Data is stored on multiple nodes (replicas).

Ensures availability and fault tolerance.

2. Quorum-based Reads and Writes (Tunable Consistency)
System requires a minimum number of replicas to acknowledge reads/writes.

Example: If total replicas = 3, read quorum = 2, write quorum = 2, then the system ensures consistency because at least one replica overlaps.

This allows tuning between strong and eventual consistency.

3. Consensus Protocols (e.g., Paxos, Raft)
Ensure agreement on the order of operations across replicas.

Enable strong consistency and linearizability.

Used by systems like Google Spanner, etcd.

4. Versioning and Vector Clocks
Track causality and concurrency.

Used to resolve conflicts (especially in causal and eventual consistency).

Example: DynamoDB, Cassandra use vector clocks or timestamps.

5. Conflict Resolution
Last Write Wins (timestamp-based)

Application-specific merge logic

Helps in eventual and causal consistency models.

6. Read Repairs and Hinted Handoff
Read Repair: When a read detects stale replicas, it triggers updates.

Hinted Handoff: Temporarily storing writes for unavailable nodes to be replayed later.

Both improve convergence and availability without sacrificing consistency guarantees fully.

7. Session Guarantees
Techniques like Read-Your-Writes or Monotonic Reads ensure per-client consistency by tracking session state.

Example: How Cassandra Ensures Tunable Consistency
User chooses consistency level (ONE, QUORUM, ALL) per read/write.

Writes sent to multiple replicas.

Reads consult a quorum to return the most recent data.

If the sum of read and write quorums > replication factor, strong consistency is achieved.

Otherwise, weaker forms like eventual consistency apply.

Summary Table of Guarantees and Mechanisms

| Consistency Level      | How It’s Ensured                              | Trade-offs                                   |
| ---------------------- | --------------------------------------------- | -------------------------------------------- |
| Strong / Linearizable  | Consensus protocols, quorum reads/writes      | Higher latency, less available in partitions |
| Sequential             | Total order guarantees, consensus             | Moderate latency                             |
| Causal                 | Versioning, vector clocks, session tracking   | Some staleness allowed                       |
| Eventual               | Asynchronous replication, conflict resolution | High availability, stale reads possible      |
| Read-Your-Writes       | Session state tracking                        | Per-client consistency                       |
| Monotonic Reads/Writes | Session guarantees                            | Per-client ordering                          |



1. Strong Consistency
Guarantee: Reads always see the latest write.

How ensured:

Uses consensus protocols (like Paxos, Raft) to agree on the order of operations.

All replicas apply writes in the same order and block reads until writes complete.

Requires quorum-based or all replicas to acknowledge writes before confirming.

Example:

Google Spanner uses TrueTime and Paxos to provide strong consistency across global nodes.

Zookeeper also provides strong consistency for configuration data.

2. Linearizability
Guarantee: Operations appear instantaneous and globally ordered in real-time.

How ensured:

Similar to strong consistency but with a stricter timing order guarantee.

Often implemented with consensus protocols and synchronized clocks.

Example:

Distributed lock services (like Chubby) use linearizability to ensure correct locking.

3. Sequential Consistency
Guarantee: All nodes see operations in the same order, but not necessarily real-time order.

How ensured:

Operations are ordered using a global sequence number or consensus, but without strict timing constraints.

Writes propagate asynchronously but are applied in the same sequence by all replicas.

Example:

Some collaborative document editors use sequential consistency to ensure all users see changes in the same order.

4. Causal Consistency
Guarantee: Operations causally related are seen in the same order by all nodes; concurrent unrelated operations may differ in order.

How ensured:

Track dependencies with vector clocks or version vectors.

Ensure causally dependent writes propagate before dependent reads.

No need for global synchronization.

Example:

DynamoDB’s Dynamo-style databases, and social media timelines ensure causal consistency to maintain “happened-before” order.

5. Eventual Consistency
Guarantee: If no new updates are made, all replicas will converge to the same value eventually.

How ensured:

Asynchronous replication with background synchronization.

Conflict resolution via timestamps, last-write-wins, or application logic.

Uses read repair and hinted handoff to fix inconsistencies.

Example:

DNS system caches data with eventual consistency.

Amazon S3 and Cassandra use eventual consistency by default.

6. Read-Your-Writes Consistency
Guarantee: A client always sees its own previous writes immediately.

How ensured:

Maintain session state per client.

Direct reads to replicas where the client’s writes are guaranteed to be visible (sticky sessions).

Example:

User profile updates in web apps often guarantee read-your-writes for a smooth experience.

7. Monotonic Reads Consistency
Guarantee: Once a client sees a value, it will not see an older value later.

How ensured:

Track client’s last read version and ensure subsequent reads return the same or newer versions.

Use session tokens or vector clocks.

Example:

Messaging apps ensure users don’t see older messages after seeing newer ones.

8. Monotonic Writes Consistency
Guarantee: Writes from a client are applied in the order they were issued.

How ensured:

Enforce ordering on client writes via sequence numbers or timestamps.

Reject or queue out-of-order writes.

Example:

Sequential logging systems ensure that logs are applied in order to maintain correctness.

Summary Table


| Consistency Level | How Ensured                                   | Example Use Case           |
| ----------------- | --------------------------------------------- | -------------------------- |
| Strong            | Consensus protocols, quorums                  | Google Spanner, Zookeeper  |
| Linearizable      | Consensus + synchronized clocks               | Distributed locks (Chubby) |
| Sequential        | Global operation ordering                     | Collaborative editing      |
| Causal            | Vector clocks, dependency tracking            | Social networks, DynamoDB  |
| Eventual          | Asynchronous replication, conflict resolution | DNS, Cassandra, S3         |
| Read-Your-Writes  | Session state, sticky reads                   | User profile updates       |
| Monotonic Reads   | Client version tracking                       | Messaging apps             |
| Monotonic Writes  | Ordered writes with sequence nums             | Logging systems            |



Quorum is a concept used in distributed systems to achieve a balance between consistency, availability, and latency when reading or writing replicated data.

What is a Quorum?
A quorum is the minimum number of nodes (replicas) that must agree or respond for an operation (read or write) to be considered successful.

It helps ensure consistency by making sure reads and writes overlap on at least one replica.

Why Use Quorum?
In distributed systems, data is replicated across multiple nodes for fault tolerance and availability.

To avoid reading stale data or losing writes during network partitions, a system waits for a quorum of replicas.

Ensures read-write intersection: at least one replica involved in a write is always involved in a read, guaranteeing the read sees the latest data.

How Quorum Works:
Suppose you have N replicas.

Define:

W = number of replicas that must acknowledge a write.

R = number of replicas that must respond to a read.

For strong consistency, these values must satisfy:

R+W>N
This means reads and writes overlap on at least one replica.

Example:
Total replicas, N = 3

Write quorum, W = 2 (write must be confirmed by at least 2 replicas)

Read quorum, R = 2 (read must fetch data from at least 2 replicas)

Since 

R+W=4>3=N, reads will always see the latest writes.

Summary

| Term       | Meaning                                    |
| ---------- | ------------------------------------------ |
| **Quorum** | Minimum number of nodes needed for success |
| **N**      | Total number of replicas                   |
| **W**      | Write quorum (nodes to confirm write)      |
| **R**      | Read quorum (nodes to confirm read)        |


Real-World Systems Using Quorum:
Apache Cassandra

Amazon DynamoDB (conceptually similar)

Riak, Voldemort, etc.



I can explain how quorum affects latency and availability or show code examples!


⚖️ Trade-offs of Quorum
1. ✅ Strong Consistency
Condition: 
𝑅
+
𝑊
>
𝑁
R+W>N

Ensures at least one common node between reads and writes.

So the read always sees the latest write.

✅ Pros:

No stale reads

Predictable behavior

❌ Cons:

Higher latency

Reduced availability if too many nodes are down

2. ⚡ Low Latency / High Availability
Use lower quorum values, e.g., R=1, W=1

Condition: 
𝑅
+
𝑊
≤
𝑁
R+W≤N

✅ Pros:

Super fast responses

More resilient to node failures

❌ Cons:

Possible stale reads

Write conflicts might need resolution logic

🧪 Example: Cassandra Quorum in Practice
Setup:
Replication factor (N) = 3

Consistency levels supported:

ONE (1 node)

QUORUM (majority, i.e. 2 of 3)

ALL (3 of 3)

Example Scenarios:
✅ Strong Consistency:

Statement stmt = new SimpleStatement("INSERT INTO users (id, name) VALUES (1, 'Alice')")
  .setConsistencyLevel(ConsistencyLevel.QUORUM); // W = 2

ResultSet rs = session.execute(
  new SimpleStatement("SELECT * FROM users WHERE id = 1")
  .setConsistencyLevel(ConsistencyLevel.QUORUM) // R = 2
);


Since 
R+W=4>N=3, this ensures strong consistency.



⚡ Eventual Consistency:

Statement stmt = new SimpleStatement("INSERT INTO users (id, name) VALUES (1, 'Alice')")
  .setConsistencyLevel(ConsistencyLevel.ONE); // W = 1

ResultSet rs = session.execute(
  new SimpleStatement("SELECT * FROM users WHERE id = 1")
  .setConsistencyLevel(ConsistencyLevel.ONE); // R = 1
);



Here 
R+W=2≤3, so you may read stale data.

📊 Summary Table


| Goal               | R | W | R + W > N | Result                 |
| ------------------ | - | - | --------- | ---------------------- |
| Strong Consistency | 2 | 2 | ✅         | Latest data guaranteed |
| Low Latency Read   | 1 | 2 | ✅         | Strong & fast reads    |
| Low Latency Write  | 2 | 1 | ✅         | Strong & fast writes   |
| High Availability  | 1 | 1 | ❌         | May return stale data  |


🛡️ What Happens on Node Failure?
Suppose 1 of 3 nodes is down:

If you're using QUORUM, you're still good (2 of 3 available).

If you're using ALL, the operation fails.

If you're using ONE, it still succeeds (but consistency may be weaker).

✅ Final Takeaway
Quorum helps balance consistency vs. latency vs. availability.

Choose R and W values depending on your application's needs:

Banking? Use QUORUM or ALL

Social media? Use ONE for speed

Would you like visual diagrams for read/write overlap in quorum, or code examples in another language like Python or Go?

🔍 Quorum Visual Diagram
Assume: Replication Factor (N) = 3
Nodes: A, B, C

✅ Strong Consistency (R + W > N)
Example: R = 2, W = 2 ⇒ R + W = 4 > 3 ✅

Write Operation

Client
   |
   └──► Write to A, B  ✔✔ (W=2 quorum)
                   \
                    └─ Not required to write to C


Read Operation

Client
   |
   └──► Read from A, B ✔✔ (R=2 quorum)



✅ At least one common node (A or B) → ensures latest value is read.

⚠️ Eventual Consistency (R + W ≤ N)
Example: R = 1, W = 1 ⇒ R + W = 2 ≤ 3 ❌

Write Operation


Client
   |
   └──► Write to A only ✔ (W=1)


Read Operation

Client
   |
   └──► Read from C only ❌ (R=1)


❌ No overlap between read and write → stale data possible

🔚 Summary


| Consistency Level | R | W      | Read Overlaps Write? | Consistent? | Fast? |
| ----------------- | - | ------ | -------------------- | ----------- | ----- |
| Strong            | 2 | 2      | ✅                    | ✅           | ❌     |
| Eventual          | 1 | 1      | ❌                    | ❌           | ✅     |
| Tunable           | 1 | 2 or 2 | ✅ (if R+W>N)         | ✅           | ⚖️    |







