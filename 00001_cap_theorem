cap theorem


Consistency  | Availability |  Partition Tolerance


Due to network issues, partition tolerance cannot be avoided.

So we can improve consistency or availability either CP (consistency, Partition Tolernce) or AP (Availability, Partition Tolernce)

Consistency

master to slave updation 

write on master and read from slaves happen


Availability:

Keeping replicas / slaves 




-----------------


The CAP Theorem is a fundamental concept in distributed systems, introduced by Eric Brewer. It states that a distributed system cannot simultaneously guarantee all three of the following properties:



ðŸ§± The Three Properties

| Property                    | Description                                                                                                                       |
| --------------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| **C â€“ Consistency**         | Every read receives the most recent write or an error. All nodes see the same data at the same time.                              |
| **A â€“ Availability**        | Every request receives a (non-error) response â€” without guarantee that it contains the most recent write.                         |
| **P â€“ Partition Tolerance** | The system continues to operate despite arbitrary partitioning (i.e., network failures that split the system into disjoint sets). |



ðŸš« The Trade-Off
A distributed system can only guarantee two of the three properties at the same time.

This gives rise to three possible system types:

| System Type                                 | Guarantees                                      | Sacrifices                                                           |
| ------------------------------------------- | ----------------------------------------------- | -------------------------------------------------------------------- |
| **CP** (Consistency + Partition tolerance)  | Strong consistency and resilience to partitions | Might be unavailable during partitions                               |
| **AP** (Availability + Partition tolerance) | Always responsive and tolerates partitions      | May serve stale data (inconsistent)                                  |
| **CA** (Consistency + Availability)         | Always returns fresh data                       | Doesnâ€™t handle partitions â€” **not realistic in distributed systems** |



ðŸ§ª Real-World Examples
| System                     | Type   | Explanation                                                                               |
| -------------------------- | ------ | ----------------------------------------------------------------------------------------- |
| **MongoDB (default)**      | **CP** | Prioritizes consistency by sacrificing availability during partitions (with replica sets) |
| **Cassandra, Couchbase**   | **AP** | Always available, but may serve older values during partitions                            |
| **RDBMS on a single node** | **CA** | No network partition to worry about (not distributed), so can be consistent and available |


âœ… Summary
In real-world distributed systems, Partition Tolerance (P) is a must.

So you typically choose between:

Consistency (C) and Availability (A) under partition conditions.

Your choice depends on your business needs:

Banking apps â†’ prefer Consistency

Social media feeds â†’ prefer Availability
