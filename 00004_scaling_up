Vertical Scaling : Adding more CPU / RAM to single machine or instance

Preprocesing/ Cron Job / Pipeline Runs

Keep Backup : Master Slave Architecture : It also avoids Single Point of failure : read from many slaves. balancing read loads.

Horizontal Scaling : Increasig no of machines.  It also avoids Single Point of failure. Fast deliveries and handle more requests

Load Balancing is needed to handle multiple machines

Communication is no longer Inter process communication but more of RPCs - Remote Procedure Calls

Maintain data consistency is a need 

Microservice Architecture : Route to each service based on its CPU or RAM remaining and service it provides and scale them up independently
based on the incoming traffic requirement.

Distributed Systems: Fault Tolerance and quicker response

CDN close to each geographical region and we keeep static content like unstructured data like video and images which deal UDP connectionless protocol.

Cache at the server client database, L1 L2 cache based on eviction policy like LRU, LFU
cache policy : read through cache , write back and write through
Redis Cache (Cluster) when we dont want to use in memory cache as it is dependent on service up or down.

Rate Limiter at clientr facing to avoid DDOS attacks/ Reverse Proxy (Nginx) at the server side

Middleware that does basic request checks 

Proxy at the client side

API gateway vs router: 
Router routes within same group of network. Gateway routes among dissimilar group of network.


Separation of Concerns / Decoupling and high Cohesion

Logging errors metrics / Analytics / Machine Learning / Auditing

Extensible






